name: Build Aydsko iRacing Data API

on:
  push:
    branches:
      - main
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    env:
      DOTNET_NOLOGO: true
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true # Avoid pre-populating the NuGet package cache

    steps:

      - name: 'Checkout Code'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Required for MinVer to work properly

      - name: 'Setup .NET SDK'
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'

      - name: 'Setup .NET SDK'
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.x'

      - name: 'Build Solution'
        id: build-solution
        shell: pwsh
        working-directory: src
        run: dotnet build -c Release

      - name: 'Run Tests'
        shell: pwsh
        working-directory: src
        run: dotnet test -c Release --no-build --collect:"XPlat Code Coverage"

      - uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: test-results
          path: '**\TestResults\**\*.trx'

      - name: 'Copy Package to Root'
        shell: pwsh
        run: |
          mkdir coverage
          cd coverage
          Get-ChildItem -Path ..\src\* -Recurse -Include coverage.cobertura.xml | Copy-Item -Container:$false
          pwd
          dir

      - name: 'Copy Package to Root'
        shell: pwsh
        run: Get-ChildItem -Path src\*\bin\Release\* -Recurse -Include *.nupkg | Copy-Item -Container:$false

      - name: Push Pre-Release Package to GitHub Packages
        if: steps.build-solution.outputs.PRERELEASE == 'true' && (${{ env.PACKAGE_KEY }} == null || ${{ env.PACKAGE_KEY }} == '')
        shell: pwsh
        run: dotnet nuget push *.nupkg --api-key ${{ env.PACKAGE_KEY }} --source "https://nuget.pkg.github.com/AdrianJSClark/index.json"
        env:
            PACKAGE_KEY: ${{ secrets.PACKAGE_UPLOAD }}

      - name: 'Create Draft Release'
        if: ${{ steps.build-solution.outputs.PRERELEASE == 'false' }}
        shell: pwsh
        # Can't just use wildcard in this command due to https://github.com/cli/cli/issues/5099 so use Get-Item
        run: gh release create --draft --title "${{ steps.build-solution.outputs.BUILDVERSION }}" --notes-file "src\Aydsko.iRacingData\Package Release Notes.txt" "release-${{ steps.build-solution.outputs.BUILDVERSION }}" (Get-Item *.nupkg)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Upload Artifacts'
        uses: actions/upload-artifact@v2
        with:
          name: NuGet Packages
          path: Aydsko.*.nupkg
